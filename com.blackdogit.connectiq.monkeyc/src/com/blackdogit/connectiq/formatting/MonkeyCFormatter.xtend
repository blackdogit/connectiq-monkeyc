/*
 * generated by Xtext
 */
package com.blackdogit.connectiq.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.google.inject.Inject
import com.blackdogit.connectiq.services.MonkeyCGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class MonkeyCFormatter extends AbstractDeclarativeFormatter {

	@Inject extension MonkeyCGrammarAccess

	override protected void configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(120)

		// find common keywords an specify formatting for them
		findKeywordPairs("(", ")").forEach [
			c.setNoSpace().before(first)
			c.setNoSpace().after(first)
			c.setNoSpace().before(second)
			c.setNoSpace().after(second)
		]
		findKeywordPairs("[", "]").forEach [
			c.setNoSpace().after(first)
			c.setNoSpace().before(second)
		]
		findKeywordPairs("{", "}").forEach [
			c.setLinewrap().after(first)
			c.setLinewrap().before(second)
		]

		// New lines around annotations
		// TODO does not work
		c.setLinewrap().around(annotationRule)

		// No space in Qualified Name
		c.setNoSpace().around(qualifiedNameAccess.fullStopKeyword_1_0)

		// No space in ":symbol"
		c.setNoSpace().after(symbolAccess.colonKeyword_0)

		// No space before ','
		findKeywords(",").forEach[c.setNoSpace().before(it)]

		// No space before ';' and new line after
		findKeywords(";").forEach[c.setNoSpace().before(it); c.setLinewrap().after(it)]

		// Empty line between module and class declaration
		c.setLinewrap(2).around(moduleDeclRule)
		c.setLinewrap(2).around(classDeclRule)
		c.setLinewrap(2).around(functionDeclRule)

		//		c.setLinewrap(2).after(declRule)
		// New line after all statements
		c.setLinewrap().after(declRule)
		c.setLinewrap().after(statementRule)

		// Indent inside module, class and enum declarations
		c.setIndentationIncrement().after(moduleDeclAccess.leftCurlyBracketKeyword_5)
		c.setIndentationDecrement().before(moduleDeclAccess.rightCurlyBracketKeyword_7)

		c.setIndentationIncrement().after(classDeclAccess.leftCurlyBracketKeyword_6)
		c.setIndentationDecrement().before(classDeclAccess.rightCurlyBracketKeyword_8)

		c.setIndentationIncrement().after(enumDeclAccess.leftCurlyBracketKeyword_4)
		c.setIndentationDecrement().before(enumDeclAccess.rightCurlyBracketKeyword_7)

		// Indent inside blocks
		c.setIndentationIncrement().after(blockAccess.leftCurlyBracketKeyword_0)
		c.setIndentationDecrement().before(blockAccess.rightCurlyBracketKeyword_3)

		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)

	//		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
	//		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}
}
